security:
    encoders:
        App\Entity\User:
            algorithm: argon2i        
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        #in_memory: { memory: null }
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER, ROLE_A, ROLE_B, ROLE_C]
        ROLE_USER: []
        ROLE_A: []
        ROLE_B: []
        ROLE_C: []   

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /auth
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator                

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/auth, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: POST }
        - { path: ^/users, roles: IS_AUTHENTICATED_ANONYMOUSLY, ip: 185.247.117.219, port: 81  }
        - { path: ^/users/:id, roles: ROLE_USER }
